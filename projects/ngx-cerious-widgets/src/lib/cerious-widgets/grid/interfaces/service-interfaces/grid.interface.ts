import { ElementRef, QueryList, TemplateRef } from "@angular/core";
import { Observable, ReplaySubject, Subject } from "rxjs";
import { ColumnDef } from "../column-def";
import { SortState } from "../sort-state";
import { GridApi } from "../grid-api";
import { GridOptions } from "../grid-options";
import { IGridComponent } from "../component-interfaces/grid.interface";
import { IGridBodyComponent } from "../component-interfaces/grid-body.interface";
import { IGridFooterComponent } from "../component-interfaces/grid-footer.interface";
import { IGridHeaderComponent } from "../component-interfaces/grid-header.interface";
import { IGridMenuBarComponent } from "../component-interfaces/grid-menu-bar.interface";
import { IGridPagerComponent } from "../component-interfaces/grid-pager.interface";
import { IGridScrollerComponent } from "../component-interfaces/grid-scroller.interface";
import { GridDataset } from "../grid-dataset";
import { PluginOptions } from "../plugin-options";
import { FilterState } from "../filter-state";

export interface IGridService {
  gridApi: GridApi;
  grid: IGridComponent;
  gridBody: IGridBodyComponent;
  gridContainer: ElementRef;
  gridFooter: IGridFooterComponent;
  gridHeader: IGridHeaderComponent;
  gridMenuBar: IGridMenuBarComponent;
  gridPager: IGridPagerComponent;
  gridScroller: IGridScrollerComponent;

  dataset: Array<any>;
  currentFilterState: FilterState;
  currentSortState: SortState[];
  fillerRowHeight: number;
  filteredDataset: Array<any>;
  sortedDataset: Array<any>;
  gridContainerElement: HTMLElement | null;
  gridDataset: GridDataset;
  gridOptions: GridOptions;
  hasHorizontalScrollbar: boolean;
  hasVerticalScrollbar: boolean;
  headerWidth: string;
  moddedColumnWidth: number;
  originalDataset: Array<any>;
  os: string;
  pinnedColumns: ColumnDef[];
  pinnedColumnWidth:number;
  pluginOptions: PluginOptions;
  rowMinWidth: string;
  scrollbarHeight: number;
  scrollbarWidth: number;
  scrollbarSize: number;
  tableScrollHeight: number;
  tableScrollWidth: number;
  templates: { [key: string]: TemplateRef<any> };

  afterApplySorting: Subject<any>;
  afterApplyFilter: Subject<any>;
  afterGroupBy: Subject<any>;
  afterPinnedColumnsUpdated: Subject<any>;
  afterResize: Subject<any>;
  afterRender: Subject<any>;
  afterUpdateHeaderOrder: Subject<any>;
  pageChange: ReplaySubject<any>;
  rowSelect: ReplaySubject<any>;
  selectedRowsChange: ReplaySubject<any>;

  addGroupByColumn(column: ColumnDef): void;

  applyFilter(filterState: FilterState, dataset: any): any[];
  applySorting(sortState: SortState[]): void;
  endColumnResizing(): void;
  getFeatureCount(): number;
  initColumnResizing(column: ColumnDef, e: MouseEvent): void;
  onMouseMove(e: MouseEvent): void;
  onMouseUp(e: MouseEvent): void;
  processDataset(): void;
  processPageData(): void;
  processPaging(): void;
  processTemplates(templateRefs: QueryList<TemplateRef<any>>): void;
  removeGroupByColumn(column: ColumnDef): void;
  render(): void;
  resize(): void;
  resizeColumn: (e: MouseEvent) => void;
  requestData(): Observable<any>;
  selectPage(pageNumber: number, scroll?: boolean): void;
  setData(dataset: Array<any>, totalRowCount?: number): void;
  setGridContainerElement(): void;
  setHasHorizontalScrollbar(): void;
  setHasVerticalScrollbar(): void;
  setScrollbarSize(): void;
  updateGridHeight(): void;
  updateHeaderOrder(columns?: ColumnDef[]): void;
  updatePinnedCols(): void;
  updateToggledPinnedCols(): void;
}